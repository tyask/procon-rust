{
	// Place your procon-rust ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"i64": {
		"prefix": "i", "body": [ "i64" ],
	},
	"input": {
		"prefix": "in", "body": [ "input! {$1}" ],
	},
	"println!(\"\")": {
		"prefix": "p", "body": [ "println!(\"$1\");" ],
	},
	"println!(\"{}\", )": {
		"prefix": "pp", "body": [ "println!(\"{}\", $1);" ],
	},
	"println!(\"{} {}\", )": {
		"prefix": "p2", "body": [ "println!(\"{} {}\", $1, $2);" ],
	},
	"println!(\"{} {} {}\", )": {
		"prefix": "p3", "body": [ "println!(\"{} {} {}\", $1, $2, $3);" ],
	},
	"println!(\"{}\", fmtx!())": {
		"prefix": "pf", "body": [ "println!(\"{}\", fmt!($1));" ],
	},
	"print(yes)": {
		"prefix": "py", "body": [ "println!(\"yes\");" ],
	},
	"print(Yes)": {
		"prefix": "py", "body": [ "println!(\"Yes\");" ],
	},
	"print(YES)": {
		"prefix": "py", "body": [ "println!(\"YES\");" ],
	},
	"print(yes())": {
		"prefix": "pyy", "body": [ "println!(\"{}\", yes($1));" ],
	},
	"print(Yes())": {
		"prefix": "pyy", "body": [ "println!(\"{}\", Yes($1));" ],
	},
	"print(YES())": {
		"prefix": "pyy", "body": [ "println!(\"{}\", YES($1));" ],
	},
	"print(no)": {
		"prefix": "pn", "body": [ "println!(\"no\");" ],
	},
	"print(No)": {
		"prefix": "pn", "body": [ "println!(\"No\");" ],
	},
	"print(NO)": {
		"prefix": "pn", "body": [ "println!(\"NO\");" ],
	},
	"debug1()": {
		"prefix": "d1", "body": [ "println!(\"{:?}\", $1);" ],
	},
	"debug2()": {
		"prefix": "d2", "body": [ "println!(\"{:?}, {:?}\", $1, $2);" ],
	},

	"for i in 0..": {
		"prefix": "fi", "body": [ "for i in 0..$1 {$2}" ],
	},
	"for i in 0.. { for j in 0..": {
		"prefix": "fij", "body": [ "for i in 0..$1 { for j in 0..$2 {$3}}" ],
	},
	"for (i, j) ...": {
		"prefix": "fij2", "body": [ "for (i, j) in iproduct!(0..$1, 0..$2) {$3}" ],
	},
	"for &() in &": {
		"prefix": "fin", "body": [ "for &($1) in &$2 {$3}" ],
	},

}